/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "rev_motor.hpp"

#include "tap/algorithms/math_user_utils.hpp"
#include "tap/drivers.hpp"

#ifdef PLATFORM_HOSTED
#include <iostream>

#include "tap/communication/tcp-server/json_messages.hpp"
#include "tap/communication/tcp-server/tcp_server.hpp"

#include "modm/architecture/interface/can_message.hpp"
#endif

namespace tap
{
namespace motor
{
RevMotor::~RevMotor() { drivers->revMotorTxHandler.removeFromMotorManager(*this); }

RevMotor::RevMotor(
    Drivers* drivers,
    REVMotorId desMotorIdentifier,
    tap::can::CanBus motorCanBus,
    ControlMode controlMode,
    bool isInverted,
    const char* name,
    float gearRatio,
    uint32_t encoderHomePosition,
    tap::encoder::EncoderInterface* externalEncoder)
    : CanRxListener(drivers, static_cast<uint32_t>(desMotorIdentifier), motorCanBus),
      motorName(name),
      drivers(drivers),
      motorIdentifier(desMotorIdentifier),
      motorCanBus(motorCanBus),
      controlMode(controlMode),
      desiredOutput(0),
      motorInverted(isInverted),
      internalEncoder(isInverted, gearRatio),
      encoder(
          {externalEncoder != nullptr ? externalEncoder
                                      : const_cast<RevMotorEncoder*>(&this->getInternalEncoder()),
           externalEncoder != nullptr ? const_cast<RevMotorEncoder*>(&this->getInternalEncoder())
                                      : nullptr})
{
    // motorDisconnectTimeout.stop();
}

void RevMotor::initialize()
{
    drivers->revMotorTxHandler.addMotorToManager(this);
    attachSelfToRxHandler();
    this->setControlMode(controlMode);
    this->setPeriodicStatusFrame(APICommand::Period0, 0);
    this->setPeriodicStatusFrame(APICommand::Period1, 2);
    this->setPeriodicStatusFrame(APICommand::Period2, 2);
    this->setPeriodicStatusFrame(APICommand::Period3, 0);
    this->setPeriodicStatusFrame(APICommand::Period4, 0);
}

void RevMotor::processMessage(const modm::can::Message& message)
{
    uint32_t receivedArbId = message.getIdentifier();
    uint64_t rawValue = 0;
    std::memcpy(&rawValue, message.data, sizeof(uint64_t));

    // restart disconnect timer, since you just received a message from the motor
    motorDisconnectTimeout.restart(MOTOR_DISCONNECT_TIME);

    if (receivedArbId == CreateArbitrationControlId(APICommand::Period0, this))
    {
        period0_.dutyCycle = int16_t(rawValue & 0xFFFF) / 32768.0f;
        period0_.faults = (rawValue >> 16) & 0xFFFF;
        period0_.stickyFaults = (rawValue >> 32) & 0xFFFF;
        period0_.isInverted = (rawValue >> 49) & 1;
        period0_.idleMode = (rawValue >> 57) & 1;
        period0_.isFollower = (rawValue >> 58) & 1;
    }
    else if (receivedArbId == CreateArbitrationControlId(APICommand::Period1, this))
    {
        this->internalEncoder.processMessage(message);
        period1_.temperature = (rawValue >> 32) & 0xFF;
        period1_.voltage = ((rawValue >> 40) & 0xFFFF) / 128.0f;
        period1_.current = ((rawValue >> 48) & 0xFFF) / 32.0f;
    }
    else if (receivedArbId == CreateArbitrationControlId(APICommand::Period2, this))
    {
        this->internalEncoder.processMessage(message);
        period2_.iAccum = float((rawValue >> 32) & 0xFFFFFFFF) / 1000.0f;
    }
    else if (receivedArbId == CreateArbitrationControlId(APICommand::Period3, this))
    {
        uint8_t* intVal = reinterpret_cast<uint8_t*>(&rawValue);
        uint16_t voltage = intVal[0] | ((intVal[1] & 3) << 8);
        period3_.analogVoltage = float(voltage) / 256.0f;
        uint32_t velocity =
            ((intVal[1] >> 2) & 0x3F) | (uint32_t(intVal[2]) << 6) | (uint32_t(intVal[3]) << 14);
        period3_.analogVelocity = float(velocity) / 32768.0f;
        uint32_t position = (rawValue >> 32) & 0xFFFFFFFF;
        std::memcpy(&period3_.analogPosition, &position, 4);
    }
    else if (receivedArbId == CreateArbitrationControlId(APICommand::Period4, this))
    {
        uint32_t velocity = rawValue & 0xFFFFFFFF;
        uint32_t position = (rawValue >> 32) & 0xFFFFFFFF;
        std::memcpy(&period4_.altEncoderVelocity, &velocity, 4);
        std::memcpy(&period4_.altEncoderPosition, &position, 4);
    }
}

bool RevMotor::isMotorOnline() const
{
    /*
     * motor online if the disconnect timout has not expired (if it received message but
     * somehow got disconnected) and the timeout hasn't been stopped (initially, the timeout
     * is stopped)
     */
    return !motorDisconnectTimeout.isExpired() && !motorDisconnectTimeout.isStopped();
}

// Add these implementations to rev_motor.cpp
RevMotor::APICommand RevMotor::controlModeToAPI(ControlMode mode)
{
    if (mode == ControlMode::DUTY_CYCLE)
    {
        return APICommand::DutyCycle;
    }
    else if (mode == ControlMode::VELOCITY)
    {
        return APICommand::Velocity;
    }
    else if (mode == ControlMode::POSITION)
    {
        return APICommand::Position;
    }
    else if (mode == ControlMode::VOLTAGE)
    {
        return APICommand::Voltage;
    }
    else if (mode == ControlMode::CURRENT)
    {
        return APICommand::Current;
    }
}

void RevMotor::setMotorPID(const PIDConfig& config, uint8_t slot)
{
    if (slot > 3)
    {
        return;  // Invalid slot, do nothing
    }
    switch (slot)
    {
        case 0:
            setParameter(Parameter::kP_0, config.kP);
            setParameter(Parameter::kI_0, config.kI);
            setParameter(Parameter::kD_0, config.kD);
            setParameter(Parameter::kF_0, config.kF);
            setParameter(Parameter::kIZone_0, config.kIZone);
            setParameter(Parameter::kDFilter_0, config.kDFilter);
            setParameter(Parameter::kOutputMax_0, config.kOutputMax);
            setParameter(Parameter::kOutputMin_0, config.kOutputMin);
            break;
        case 1:
            setParameter(Parameter::kP_1, config.kP);
            setParameter(Parameter::kI_1, config.kI);
            setParameter(Parameter::kD_1, config.kD);
            setParameter(Parameter::kF_1, config.kF);
            setParameter(Parameter::kIZone_1, config.kIZone);
            setParameter(Parameter::kDFilter_1, config.kDFilter);
            setParameter(Parameter::kOutputMax_1, config.kOutputMax);
            setParameter(Parameter::kOutputMin_1, config.kOutputMin);
            break;
        case 2:
            setParameter(Parameter::kP_2, config.kP);
            setParameter(Parameter::kI_2, config.kI);
            setParameter(Parameter::kD_2, config.kD);
            setParameter(Parameter::kF_2, config.kF);
            setParameter(Parameter::kIZone_2, config.kIZone);
            setParameter(Parameter::kDFilter_2, config.kDFilter);
            setParameter(Parameter::kOutputMax_2, config.kOutputMax);
            setParameter(Parameter::kOutputMin_2, config.kOutputMin);
            break;
        case 3:
            setParameter(Parameter::kP_3, config.kP);
            setParameter(Parameter::kI_3, config.kI);
            setParameter(Parameter::kD_3, config.kD);
            setParameter(Parameter::kF_3, config.kF);
            setParameter(Parameter::kIZone_3, config.kIZone);
            setParameter(Parameter::kDFilter_3, config.kDFilter);
            setParameter(Parameter::kOutputMax_3, config.kOutputMax);
            setParameter(Parameter::kOutputMin_3, config.kOutputMin);
            break;
    }
}

void RevMotor::setControlMode(ControlMode mode) { controlMode = mode; }

void RevMotor::setControlValue(float value) { controlValue = motorInverted ? -value : value; }

modm::can::Message RevMotor::constructRevMotorHeartBeat(const RevMotor* motor)
{
    APICommand cmd = APICommand::Heartbeat;
    uint32_t RevArbitrationId = CreateArbitrationControlId(cmd, motor);
    // the number of bytes in the message
    uint8_t canRevIdLength = 8;
    modm::can::Message canMessage(RevArbitrationId, canRevIdLength, 0, true);

    for (int i = 0; i < 8; i++)
    {
        canMessage.data[i] = 0xFF;
    }

    return canMessage;
}

void RevMotor::setPeriodicStatusFrame(APICommand periodic, uint16_t periodMs)
{
    uint32_t RevArbitrationId = CreateArbitrationControlId(periodic, this);
    uint8_t canRevIdLength = 5;
    modm::can::Message canMessage(RevArbitrationId, canRevIdLength, 0, true);

    // Pack periodMs as little-endian uint16_t
    canMessage.data[0] = static_cast<uint8_t>(periodMs & 0xFF);
    canMessage.data[1] = static_cast<uint8_t>((periodMs >> 8) & 0xFF);

    // The next three bytes are reserved and should be set to 0xFF
    canMessage.data[2] = 0xFF;
    canMessage.data[3] = 0xFF;
    canMessage.data[4] = 0xFF;
    canMessage.data[5] = 0xFF;
    canMessage.data[6] = 0xFF;
    canMessage.data[7] = 0xFF;
    canMessage.length = 2;

    paramQueue.push(canMessage);
}

void RevMotor::setParameter(Parameter param, float paramVal)
{
    uint32_t RevArbitrationId = CreateArbitrationParameterId(param, this);
    uint8_t canRevIdLength = 8;
    modm::can::Message canMessage(RevArbitrationId, canRevIdLength, 0, true);
    std::memcpy(&canMessage.data[0], &paramVal, sizeof(paramVal));

    canMessage.data[4] = static_cast<uint8_t>(2);
    canMessage.length = 5;

    // Zero out the remaining bytes
    for (int i = 5; i < 8; i++)
    {
        canMessage.data[i] = 0;
    }

    paramQueue.push(canMessage);
}

/**
 * constructs a can message for the given REV motor by using the motor's id and the
 * desired control mode id to tell the the motor what method of control you want to
 * use. the control modes can be found in a REV SW Spark Max google sheet which can be
 * obtained by emailing REV Robotics.
 */
modm::can::Message RevMotor::createRevCanMessage(const RevMotor* motor)
{
    if (!paramQueue.empty())
    {
        modm::can::Message canMessage = paramQueue.front();
        paramQueue.pop();
        return canMessage;
    }
    uint32_t RevArbitrationId;

    // If no parameters, use the control mode
    RevArbitrationId = CreateArbitrationControlId(controlModeToAPI(controlMode), motor);

    uint8_t canRevIdLength = 8;
    modm::can::Message canMessage(RevArbitrationId, canRevIdLength, 0, true);
    // fill with control value data
    std::memcpy(&canMessage.data[0], &controlValue, sizeof(controlValue));
    // Zero out the remaining bytes
    for (int i = sizeof(controlValue); i < 8; i++)
    {
        canMessage.data[i] = 0;
    }
    return canMessage;
}

uint32_t RevMotor::CreateArbitrationControlId(APICommand cmd, const RevMotor* motor) const
{
    uint8_t apiClass = GetAPIClass(cmd);
    uint8_t apiIndex = GetAPIIndex(cmd);
    uint8_t deviceId = motor->getMotorIdentifier();

    return (static_cast<uint32_t>(0x02) << 24) | (static_cast<uint32_t>(0x05) << 16) |
           (static_cast<uint32_t>(apiClass) << 10) | (static_cast<uint32_t>(apiIndex) << 6) |
           static_cast<uint32_t>(deviceId);
}

uint32_t RevMotor::CreateArbitrationParameterId(Parameter param, const RevMotor* motor) const
{
    const uint32_t api = 0x300 | (static_cast<uint32_t>(param));  // OR param into API
    uint8_t deviceId = motor->getMotorIdentifier();
    const auto x = 48 << 4;
    return (static_cast<uint32_t>(0x02) << 24) | (static_cast<uint32_t>(0x05) << 16) |
           (static_cast<uint32_t>(api) << 6) | static_cast<uint32_t>(deviceId);
}

uint8_t RevMotor::GetAPIClass(APICommand cmd) const
{
    return static_cast<uint8_t>(static_cast<uint16_t>(cmd) >> 4);
}

uint8_t RevMotor::GetAPIIndex(APICommand cmd) const
{
    return static_cast<uint8_t>(static_cast<uint16_t>(cmd) & 0x0F);
}

float RevMotor::getControlValue() const { return controlValue; }

RevMotor::ControlMode RevMotor::getControlMode() const { return controlMode; }

uint32_t RevMotor::getMotorIdentifier() const { return motorIdentifier; }

tap::can::CanBus RevMotor::getCanBus() const { return motorCanBus; }

const char* RevMotor::getName() const { return motorName; }

}  // namespace motor

}  // namespace tap
