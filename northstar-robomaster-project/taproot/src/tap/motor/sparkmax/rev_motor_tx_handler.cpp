/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "rev_motor_tx_handler.hpp"
//DO I WANT THIS?
#include "rev_motor.hpp"

#include <cassert>

#include "tap/algorithms/math_user_utils.hpp"
#include "tap/drivers.hpp"
#include "tap/errors/create_errors.hpp"

#include "modm/architecture/interface/assert.h"
#include "modm/architecture/interface/can_message.hpp"

#include "rev_motor.hpp"

namespace tap::motor
{
void RevMotorTxHandler::addMotorToManager(RevMotor** canMotorStore, RevMotor* const motor)
{
    assert(motor != nullptr);
    uint32_t idIndex = motor->getMotorIdentifier();
    bool motorOverloaded = canMotorStore[idIndex] != nullptr;
    bool motorOutOfBounds = idIndex >= REV_MOTORS_PER_CAN;
    modm_assert(!motorOverloaded && !motorOutOfBounds, "RevMotorTxHandler", "overloading");
    canMotorStore[idIndex] = motor;
}

void RevMotorTxHandler::addMotorToManager(RevMotor* motor)
{
    // add new motor to either the can1 or can2 motor store
    // because we checked to see if the motor is overloaded, we will
    // never have to worry about overfilling the CanxMotorStore array
    if (motor->getCanBus() == tap::can::CanBus::CAN_BUS1)
    {
        addMotorToManager(can1MotorStore, motor);
    }
    else
    {
        addMotorToManager(can2MotorStore, motor);
    }
}

/**
 * Encodes and sends control and heartbeat messages for all connected REV motors on both CAN buses.
 *
 * This method iterates through each motor store (CAN1 and CAN2) and for each valid motor:
 * 1. Sends a heartbeat message to maintain connection with the motor controller
 * 2. Sends a control message with the motor's current target values
 *
 * The heartbeat messages prevent timeout disconnections, while the control messages
 * provide the actual motor commands. Each message is properly formatted with the
 * correct arbitration ID based on the motor's ID and message type.
 *
 * If any send operation fails, an error will be raised.
 *
 * @note This method should be called periodically to maintain motor control.
 */
void RevMotorTxHandler::encodeAndSendCanData()
{
    bool messageSuccess = true;

    // Process CAN bus 1 motors
    if (drivers->can.isReadyToSend(can::CanBus::CAN_BUS1))
    {
        for (int i = 0; i < REV_MOTORS_PER_CAN; i++)
        {
            RevMotor* motor = can1MotorStore[i];
            if (motor != nullptr)
            {
                // Create and send heartbeat for this motor
                modm::can::Message heartbeatMsg = motor->constructRevMotorHeartBeat(motor);
                messageSuccess &= drivers->can.sendMessage(can::CanBus::CAN_BUS1, heartbeatMsg);

                // Create and send control message for this motor
                modm::can::Message controlMsg = motor->createRevCanMessage(motor);
                messageSuccess &= drivers->can.sendMessage(can::CanBus::CAN_BUS1, controlMsg);
            }
        }
    }

    // Process CAN bus 2 motors
    if (drivers->can.isReadyToSend(can::CanBus::CAN_BUS2))
    {
        // Then do the same for CAN2
        for (int i = 0; i < REV_MOTORS_PER_CAN; i++)
        {
            RevMotor* motor = can2MotorStore[i];
            if (motor != nullptr)
            {
                // TODO: MOVE THESE FUNCTIONS INTO REV MOTOR CLASS and then reimplement them here
                // Create and send heartbeat for this motor
                modm::can::Message heartbeatMsg = motor->constructRevMotorHeartBeat(motor);
                messageSuccess &= drivers->can.sendMessage(can::CanBus::CAN_BUS2, heartbeatMsg);

                // Create and send control message for this motor
                modm::can::Message controlMsg = motor->createRevCanMessage(motor);
                messageSuccess &= drivers->can.sendMessage(can::CanBus::CAN_BUS2, controlMsg);
            }
        }
    }

    if (!messageSuccess)
    {
        RAISE_ERROR(drivers, "sendMessage failure");
    }
}

/**
 * Sets all bytes in the CAN message data field to 0xFF (255 decimal),
 * which serves as a heartbeat signal for REV motors.
 *
 * Heartbeat messages are sent periodically to maintain connection with
 * the motor controllers and prevent timeout disconnections. When a REV motor
 * controller receives this specific pattern (all 0xFF), it recognizes it as
 * a "still alive" signal from the control system.
 *
 * @param message Pointer to the CAN message whose data field will be filled with 0xFF values
 */

void RevMotorTxHandler::removeFromMotorManager(const RevMotor& motor)
{
    if (motor.getCanBus() == tap::can::CanBus::CAN_BUS1)
    {
        removeFromMotorManager(motor, can1MotorStore);
    }
    else
    {
        removeFromMotorManager(motor, can2MotorStore);
    }
}

void RevMotorTxHandler::removeFromMotorManager(const RevMotor& motor, RevMotor** motorStore)
{
    uint32_t id = motor.getMotorIdentifier();
    if (id > tap::motor::REV_MOTOR8 || motorStore[id] == nullptr)
    {
        RAISE_ERROR(drivers, "invalid motor id");
        return;
    }
    motorStore[id] = nullptr;
}

RevMotor const* RevMotorTxHandler::getCan1Motor(REVMotorId motorId)
{
    uint32_t index = motorId;
    return index > tap::motor::REV_MOTOR8 ? nullptr : can1MotorStore[index];
}

RevMotor const* RevMotorTxHandler::getCan2Motor(REVMotorId motorId)
{
    uint32_t index = motorId;
    return index > tap::motor::MOTOR8 ? nullptr : can2MotorStore[index];
}

}  // namespace tap::motor
